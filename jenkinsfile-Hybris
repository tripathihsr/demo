
// Define Globl variabales //
def projectName = "Hybris"
def buildNumber = env.BUILD_NUMBER
def branchname = env.BRANCH_NAME
//def workspace = env.WORKSPACE
def buildFailure = false
def sonarFailure = false
def javahome = "/usr/java/jdk1.8.0_191-amd64"  // Not needed we can use a built in functionality, check my email where I explain how to do this
def anthome = "/app/hybris/bin/platform/apache-ant-1.9.1"  // Not needed we can use a built in functionality, check my email where I explain how to do this
def hybrishome = "/app/hybris"
env.JAVA_HOME = tool 'jdk1.8.0'
env.ANT_HOME = tool 'ant1.9.1'
def platformhome = "/app/hybris/bin/platform"
//def hybris_build = """ant install clean all production -Dhybris.zip.package.src=/app/HYBRISCOMM6500P_2-80003045.zip"""//
def hybris_build = """ant install clean -Dhybris.zip.package.src=/app/HYBRISCOMM6500P_2-80003045.zip"""
def hybris_sonar_jacoco_test = """ant jacocoalltests sonar -Dtestclasses.extensions=storestorefront -Dhybris.zip.package.src=/app/HYBRISCOMM6500P_2-80003045.zip"""


node {
    try {
        stage("Clean Workspace") {
            cleanWs notFailBuild: true // This will not fail the build if clean up fails
        }        

        stage("Checkout Code"){
            sh "git config --global http.sslVerify false"
            checkout scm 
        }    

        stage("Build"){
            try {
                sh "$hybris_build" //Hybris commerce suit will be unzipped before calling ANT targets
            } catch(err) {
                buildFailure = true;
                throw err
            }
        }

        stage("Test"){
            try {
                sh "$hybris_sonar_jacoco_test"
            } catch(err) {
                buildFailure = true;
                throw err
            }
        }

        stage('Notify Team'){
            cleanWs notFailBuild: true
            emailext (
            subject: "$env.BRANCH_NAME BUILD SUCCESSFUL - #$buildNumber",
            body: """<p>$branchname - #$buildNumber successfully built, please open a Pull Request to 'develop' branch!</p>""",
            recipientProviders: [[$class: 'RequesterRecipientProvider']]
            )
        }

    } catch (err) {
        if (buildFailure) {
            emailext (
            subject: "$env.BRANCH_NAME Build Failed - #$buildNumber",
            body: """<p>$branchname - #$buildNumber build failed during the Build Phase!</p>""",
            recipientProviders: [[$class: 'RequesterRecipientProvider']]
            )
        } 
        else if (sonarFailure) {
            emailext (
            subject: "$env.BRANCH_NAME Build Failed - #$buildNumber on SonarQube Scan",
            body: """<p>$branchname - #$buildNumber build failed to pass Quality Gate.</p>""",
            recipientProviders: [[$class: 'RequesterRecipientProvider']]
            )
        } else {
            emailext (
            subject: "$env.BRANCH_NAME Build Failed - #$buildNumber",
            body: """<p>$branchname - #$buildNumber build failed, please fix before review.</p>""",
            recipientProviders: [[$class: 'RequesterRecipientProvider']]
            )
        }
    throw err
    }
    finally {
            //Done
    }
}
